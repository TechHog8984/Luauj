{
	// Place your luauj workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"AstStat class definition": {
		"scope": "java",
		"prefix": "statdef",
		"body": [
			"public static class $1 extends AstStat {",
			"    public static int ClassIndex() {",
			"        return AstRtti.get($1.class);",
			"    }",
			"",
			"    $2",
			"",
			"    public $1(Location location, $3) {",
			"        super(ClassIndex(), location);",
			"        $4",
			"    }",
			"",
			"    public void visit(AstVisitor visitor) {",
			"        if (visitor.visit(this)) {",
			"            $5",
			"        }",
			"    }",
			"}"
		]
	},
	"AstType class definition": {
		"scope": "java",
		"prefix": "typedef",
		"body": [
			"public static class $1 extends AstType {",
			"    public static int ClassIndex() {",
			"        return AstRtti.get($1.class);",
			"    }",
			"",
			"    $2",
			"",
			"    public $1(Location location, $3) {",
			"        super(ClassIndex(), location);",
			"        $4",
			"    }",
			"",
			"    public void visit(AstVisitor visitor) {",
			"        if (visitor.visit(this)) {",
			"            $5",
			"        }",
			"    }",
			"}"
		]
	}
}